using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var SearchClass = SearchClass.FromJson(jsonString);

namespace SNOMEDIDSelector.Models
{
    public partial class SearchClass
    {
        [JsonProperty("prefLabel")]
        public string PrefLabel { get; set; }

        [JsonProperty("synonym")]
        public string[] Synonym { get; set; }

        [JsonProperty("totalCount")]
        public int TotalCount { get; set; }

        [JsonProperty("definition")]
        public object[] Definition { get; set; }

        [JsonProperty("cui")]
        public string[] Cui { get; set; }

        [JsonProperty("semanticType")]
        public Uri[] SemanticType { get; set; }

        [JsonProperty("obsolete")]
        public bool Obsolete { get; set; }

        [JsonProperty("@id")]
        public Uri Id { get; set; }

        [JsonProperty("@type")]
        public Uri Type { get; set; }

        [JsonProperty("links")]
        public Links Links { get; set; }

        [JsonProperty("@context")]
        public Context Context { get; set; }
    }

    public partial class SearchClass
    {
        public static SearchClass FromJson(string json) => JsonConvert.DeserializeObject<SearchClass>(json, Misc.Converter.Settings);
    }

}
